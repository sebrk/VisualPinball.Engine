{
  "creators-guide/setup/installing-vpe.html": {
    "href": "creators-guide/setup/installing-vpe.html",
    "title": "Installing VPE | VPE Documentation",
    "keywords": "Installing VPE Unity In order to start creating or tweaking tables with VPE, the first thing you'll need to install is Unity . You will need a developer account, which is free. Note As long as you don't use VPE for a game that makes $100K or more in revenue or funding a year, the free Personal plan is sufficient for you. Unity uses an application called Unity Hub to update itself and provide quick access to your projects. The install process is straight-forward and documented here if you run into troubles. When installing Unity, use the latest 2020.1 version. You can leave all the other options unchecked. Once Unity is downloaded and installed, you'll need to create a new project. Unity has multiple render pipelines, and you'll be asked which render pipeline to use in your project: You'll have the choice between: 2D - For 2D games. VPE doesn't support this renderer. 3D - Unity's original built-in renderer. High Definition RP - Unity's new HDRP , used for high-end platforms. Universal Render Pipeline - Unity's URP is aimed at mobile and low-end platforms. We recommend using HDRP. It's not as mature as the built-in renderer, but it's able to achieve better visuals, and it's what Unity will be focusing on in the future. Note If you're just creating a throw-away project for testing out gameplay, the built-in renderer is more tested and faster to set up. We also support the URP, but it's not as well tested as the other two pipelines. Next, enter a project name and a location for your project. We recommend putting the render pipeline into the name, because in the future you might test out other pipelines and thus need to create additional projects. Tip We recommend creating a VPE folder in your user directory (which is called %userprofile% ), to contain all the VPE-related files. In this example that would be %userprofile%\\VPE\\Test Table - HDRP , which usually resolves to C:\\Users\\{username}\\VPE\\Test Table - HDRP . You're of course free to set this up however you want, but that's what we'll be referring to in the rest of the documentation. Clicking Create launches the Unity editor, pulls in all the dependencies for the new project, and compiles them. This can take a minute or two. HDRP Setup If you create an HDRP project, Unity provides you with a sample scene: It's best to start by removing the unneeded objects. In the hierarchy, select: and press delete . Similarly, to clean up the project, get rid of the extra assets in the project view: VPE Source Code Now you have your project and scene set up, let's bring VPE into the project. Go to the GitHub page and download the source code . You can do that by clicking on the green Code button, and choosing Downlaod ZIP . As mentioned above, we recommend extracting this into the %userprofile%\\VPE\\VisualPinball.Engine folder: In Unity, go to Window -> Package Manager . Click on the \"plus\" icon on the top left corner of the window, and choose Add package from disk . Choose package.json in the root folder of the extracted VPE source code. This will take a moment as Unity downloads and compiles all of VPE's dependencies. When complete, you should now have a Visual Pinball menu in the editor."
  },
  "creators-guide/setup/running-vpe.html": {
    "href": "creators-guide/setup/running-vpe.html",
    "title": "Running VPE | VPE Documentation",
    "keywords": "Running VPE Now we can get begin with some simple game play. Open Visual Pinball, create a new \"blank\" table, and save it somewhere. In Unity, go to Visual Pinball -> Import VPX and choose the new .vpx file. You should now see Visual Pinball's blank table in the Editor's scene view: Now, we don't see much of our table. That's because the scene view's camera doesn't really point on it. Using the right mouse button and the A W S D keys while keeping right mouse button pressed, fly somewhere you have a better view of the table. Tip Check Unity's documentation on Scene view navigation for a more complete list of ways to move the camera around the scene. Now that you have the camera of the scene view somewhat aligned. Tip A pinball table is a relatively small object, so Unity's \"gizmo\" icons marking scene objects are huge. You can make them smaller with the Gizmos menu by using the 3D Icons slider. The view in the scene tab is not the camera used in game. The Scene View really allows you to fly anywhere, zoom in on things you're working on, switch from orthagonal view to perspective, and so on. It's where you get work done. During game play, another camera is used. It's the one already in your scene hierarchy (called Main Camera ), and you can look through it by switching to the Game View window. This camera can be moved using Unity's gizmos , by selecting it in the hierarchy and moving and tilting it around. Tip A quick way to fix the game camera is to align it with the scene view camera. To do that, select the camera in the hierarchy, then click on the GameObject menu and select Align with view . Now, click on the play button. This will run your scene. Test that the shift keys move the flippers. Press B to add a new ball. If it's not already choppy, it will get after a dozen or so balls, because VPE currently doesn't destroy them. The choppiness is also due to running the game inside the editor, fetching data during gameplay, and the code not being optimized. This should all go away if you choose Build and Run under the File menu. Running it as \"build\" should give you significantly smoother gameplay. Tip If you want to enter play mode more quickly, you can check the experimental play mode option described here ."
  },
  "creators-guide/editor/multiple-tables.html": {
    "href": "creators-guide/editor/multiple-tables.html",
    "title": "Working with Multiple Tables | VPE Documentation",
    "keywords": "Working with Multiple Tables When working on a creation, you might want to load other tables to pick assets from. For that, Visual Pinball lets you open multiple tables allowing to switch and copy elements between them relatively quickly. With VPE, you can create or import multiple tables into your scene. VPE's manager panels will switch context when an element from a different table is selected in either the Scene view or the Hierarchy. Tip You can lock a manager window to the selected table by clicking on the small lock in the top right corner: Warning We don't have multi-table support during runtime yet. The idea is that in the future, you would be able to select which table is the runtime table. Warning Moving elements between multiple tables is not implemented yet, there is an open issue ."
  },
  "creators-guide/manual/manual.html": {
    "href": "creators-guide/manual/manual.html",
    "title": "Manual | VPE Documentation",
    "keywords": "Manual This section will document the following: Game Items Pinball Mechanisms Scripting Physics Plugins"
  },
  "creators-guide/manual/flipper.html": {
    "href": "creators-guide/manual/flipper.html",
    "title": "Flipper | VPE Documentation",
    "keywords": "Flipper Flippers. They flip. You can program them too !"
  },
  "creators-guide/introduction/overview.html": {
    "href": "creators-guide/introduction/overview.html",
    "title": "Overview | VPE Documentation",
    "keywords": "Overview The Visual Pinball Engine (which we call \"VPE\") is an open source pinball simulator that you can use to create pinball games for Windows, macOS, and Linux. It's based on the famous Visual Pinball (often abbreviated \"VP\", or \"VPX\" for its latest version 10) meaning VPE's physics simulation matches that in VPX, and it can read and write the same file format. VPE uses Unity for its underlying game architecture. Unity is one of the leading cross-platform game engines and provides VPE with an advanced render pipeline that produces high-quality visuals and is continuously maintained and updated to work with new hardware features. Unity also comes with an amazing editor, which VPE extends to make the table creation process as easy as possible. An imported .vpx file in VPE, using Unitys' High Definition Render Pipeline. Note Technically, VPE is what we call a \"library\". A library is not executable per se, because it needs a host application. We will provide such a host application in the future, but for now you will need to create a new Unity project and add VPE as a package in order to run it. Audience This documentation is mainly aimed at table creators (\"authors\"). Since it covers table scripting as well, it also contains code-related documentation. VPE is currently not in a state where it is usable by the general public (\"players\"). Documentation about how to setup VPE to play will follow at a later stage."
  },
  "creators-guide/vpe.html": {
    "href": "creators-guide/vpe.html",
    "title": "Features | VPE Documentation",
    "keywords": "Features Tutorial VPE Manual Game Items Pinball Mechanisms Scripting Physics Plugins About VPE About this Documentation Authors License and Copyright FAQ Glossary Contributing to VPE"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Scripting API | VPE Documentation",
    "keywords": "This section will contain the scripting API documentation."
  },
  "creators-guide/setup/updating-vpe.html": {
    "href": "creators-guide/setup/updating-vpe.html",
    "title": "Updating VPE | VPE Documentation",
    "keywords": "Updating VPE VPE is under heavy development, so it's frequently updated, usually multiple times per week. In order to not have to delete your existing VisualPinball.Engine folder and download and extract the code each time, we recommend using git. Git is a distributed version control system. It's very sophisticated but can also be a bit overwhelming to use. However, with the cheat sheet below you should be able to handle it. First you need to download git . Make sure it's in your PATH environment variable. There are free GUIs for git such as Fork , GitKraken or Source Tree , but we'll focus on the command line version on Windows here. Linux and macOS are similar but use a command shell or terminal window. Open a command prompt by pressing the Windows key and typing cmd , followed by enter. Make sure that git is installed by typing git --version . This should return something like git version 2.18.0.windows.1 . Next, go to the folder where you want to have VPE installed. If there is already a folder where you've extracted VPE from before, delete it. Following the recommended file structure, you would type: cd %userprofile%\\VPE git clone https://github.com/freezy/VisualPinball.Engine.git This downloads the latest version of VPE into %userprofile%\\VPE\\VisualPinball.Engine and keeps a link to GitHub. In the future, if you want to update VPE, it's simply a matter of going into the folder and \"pull\" the changes: cd %userprofile%\\VPE\\VisualPinball.Engine git pull However, you might have experimented in the VPE folder to test out stuff, and git complains it can't update. Here is a way to discard all local changes and pull in what's on GitHub: git fetch --prune git checkout -- ** git reset --hard origin/master Warning Should you have committed changes (as in, you've developed something, and added and commited it to git), this will also discard those changes. But if you have done that you're probably a seasoned developer and know what you're doing, right? :)"
  },
  "creators-guide/manual/items/flippers.html": {
    "href": "creators-guide/manual/items/flippers.html",
    "title": "Flipper | VPE Documentation",
    "keywords": "Flipper Flippers. They flip. You can program them too !"
  },
  "creators-guide/introduction/features.html": {
    "href": "creators-guide/introduction/features.html",
    "title": "Features | VPE Documentation",
    "keywords": "Features This section documents what's already working. If it's not, then that's a bug, and you should let us know . Materials We convert Visual Pinball's materials to materials compatible with the active render pipeline. That means materials look similar to Visual Pinball by default, while there's still a lot of potential left to tweak materials using the full material configuration of Unity. Bord's Viking rendered in VPX (left) and imported as-is in VPE's built-in renderer (right). Meshes Visual Pinball dynamically generates meshes for most of the game items. VPE has ported that code and does the same when loading a table. A rubber mesh generated in the editor Physics We have nearly finished porting Visual Pinball's physics engine to VPE. That means the ball and flipper behavior should be identical to Visual Pinball. This includes physics-based movement from flippers, gates and spinners, as well as animated targets, triggers and plungers. Events The physics engine emits the same events as Visual Pinball. That means you can subscribe to collision events and other game item-specific events. For example, for subscribing to the flip event of a flipper, you would do: table.Flipper(\"LeftFlipper\").LimitEos += (sender, args) => { // do something! }; Note While it's not clear how we'll handle scripting, most events can probably be configured visually in the editor and don't need to be handled via scripting. Cross Platform Unity supports a lot of platforms . Our continuous integration builds for Windows (x86/x64), macOS (x64) and Linux (x64). Besides Windows, some of our developers work on macOS, and we regularly test on Linux as well. File Format We care about backwards-compatibility to Visual Pinball. VPE can read and write .vpx files and supports the full data set. This means that you can load a table into VPE, edit it, export it to .vpx and load it back into Visual Pinball. Note VPE will at some point need to save additional data that isn't available in Visual Pinball. However, the .vpx structure is like a virtual file system, so we can do that without breaking backwards-compatibility. Editor Extensions Unity allows full editor customization. So we're adding the managers, panels, and toolboxes from Visual Pinball into the Unity editor: What you're seeing here is the toolbox as well as a few manager windows we've ported: Material Manager Image Manager Layer Manager Inspector acting as VP's Options Panel You can dock these as you wish, or even undock them and move them to another monitor. Not in the above screenshot but also ported are: Collections Manager Sound Manager VPE is also able to edit drag points. Moving those (in 3D!) re-generates the mesh on the fly: Lastly, we can visualize the colliders of any object. This can be useful to debug, and also to check whether you may have objects set to collide which actually shouldn't (or vice versa)! Patching System There are common patterns for VPX tables that are obsolete in VPE. For instance, VPE doesn't need a flipper shadow mesh, because it can do dynamic lighting out of the box. For that reason, we have a simple but sophisticated patcher system that allows us to apply changes to a table when imported. Of course the changes don't apply to the table data itself but to how we convert it into the Unity scene. You can read more about it here . Missing Features There are some things you might expect to work, but don't, because they're not yet implemented. Here's an incomplete list of those things. Key Assignments Currently, we grab left and right shift and map it to LeftFlipper and RightFlipper respectively. If the flippers are named differently, it doesn't work. VPE will provide a simple mapping mechanism where authors can link semantic key events to table logic and users can link keyboard keys to those key events. Performance When building the table, performance is okay but still not satisfactory. We think we can still do better. Runtime Import Right now, when you \"build\" your game and run it, Unity will compile it into binary assets. We want to avoid authors distributing those binaries, because they hide how things are done prevent further modding by other creators. Both of these aspects are crucial in building an ecosystem, so the goal is to only compile the player itself and load the tables at runtime. Ball Destruction Currently balls can't be destroyed during gameplay, so every drain will just leave them on the table, resulting in poor performance. Planned Features This section will at some point contain a list of major new features."
  },
  "api/VisualPinball.Unity.FlipperApi.html": {
    "href": "api/VisualPinball.Unity.FlipperApi.html",
    "title": "Class FlipperApi | VPE Documentation",
    "keywords": "Class FlipperApi The scripting API of the flipper. Inheritance System.Object VisualPinball.Unity.ItemApi < VisualPinball.Engine.VPT.Flipper.Flipper , VisualPinball.Engine.VPT.Flipper.FlipperData > FlipperApi Namespace : VisualPinball.Unity Assembly : VisualPinball.Unity.dll Syntax public class FlipperApi : ItemApi<Flipper, FlipperData>, IApiInitializable, IApiHittable, IApiRotatable, IApiCollidable Methods | Improve this Doc View Source RotateToEnd() Enables the flipper's solenoid, making the flipper to start moving to its end position. Declaration public void RotateToEnd() | Improve this Doc View Source RotateToStart() Disables the flipper's solenoid, making the flipper rotate back to its resting position. Declaration public void RotateToStart() Events | Improve this Doc View Source Collide Event emitted when the flipper collided with the ball. Declaration public event EventHandler<CollideEventArgs> Collide Event Type Type Description EventHandler < VisualPinball.Unity.CollideEventArgs > | Improve this Doc View Source Hit Event emitted when the flipper was touched by the ball, but did not collide. Declaration public event EventHandler Hit Event Type Type Description EventHandler | Improve this Doc View Source Init Event emitted when the table is started. Declaration public event EventHandler Init Event Type Type Description EventHandler | Improve this Doc View Source LimitBos Event emitted when the flipper comes to rest, i.e. moves back to the resting position. Declaration public event EventHandler<RotationEventArgs> LimitBos Event Type Type Description EventHandler < VisualPinball.Unity.RotationEventArgs > | Improve this Doc View Source LimitEos Event emitted when the flipper reaches its end position. Declaration public event EventHandler<RotationEventArgs> LimitEos Event Type Type Description EventHandler < VisualPinball.Unity.RotationEventArgs > | Improve this Doc View Source Timer Declaration public event EventHandler Timer Event Type Type Description EventHandler"
  },
  "api/VisualPinball.Unity.html": {
    "href": "api/VisualPinball.Unity.html",
    "title": "Namespace VisualPinball.Unity | VPE Documentation",
    "keywords": "Namespace VisualPinball.Unity Classes FlipperApi The scripting API of the flipper."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | VPE Documentation",
    "keywords": "Welcome to the documentation of the Start here with the creator's guide . Be aware we're at the very beginning of writing documentation. You'll see weird content."
  }
}